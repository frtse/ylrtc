#include "stun_message.h"

#include <cstdint>

#include "gtest/gtest.h"

/*  Test STUN message.
    Message Type: 0x0001 (Binding Request)
        .... ...0 ...0 .... = Message Class: 0x00 Request (0)
        ..00 000. 000. 0001 = Message Method: 0x0001 Binding (0x001)
        ..0. .... .... .... = Message Method Assignment: IETF Review (0x0)
    Message Length: 144
    Message Cookie: 2112a442
    Message Transaction ID: 75746d30333677574e624c76
    Attributes
        USERNAME: 9527/owhmmmd6iazxmffu1h0no0nk79uqcsai3s8jviux3j91b2sw3gdx2zob9bnyag24:fdXj
            Attribute Type: USERNAME (0x0006)
            Attribute Length: 74
            Username: 9527/owhmmmd6iazxmffu1h0no0nk79uqcsai3s8jviux3j91b2sw3gdx2zob9bnyag24:fdXj
            Padding: 2
        Unknown
            Attribute Type: Unknown (0xc057)
            Attribute Length: 4
            Value: 00010000
        ICE-CONTROLLING
            Attribute Type: ICE-CONTROLLING (0x802a)
            Attribute Length: 8
            Tie breaker: a6e3dd8c23722b5f
        USE-CANDIDATE
            Attribute Type: USE-CANDIDATE (0x0025)
            Attribute Length: 0
        PRIORITY
            Attribute Type: PRIORITY (0x0024)
            Attribute Length: 4
            Priority: 1853824767
        MESSAGE-INTEGRITY
            Attribute Type: MESSAGE-INTEGRITY (0x0008)
            Attribute Length: 20
            HMAC-SHA1: e65369b4627d4512f540ac070f8023ef1d65dde9
        FINGERPRINT
            Attribute Type: FINGERPRINT (0x8028)
            Attribute Length: 4
            CRC-32: 0x415db2ae
*/
static uint8_t kStunMessage[] = {
  0x00, 0x01, 0x00, 0x90, 0x21, 0x12, 0xa4, 0x42, 0x75, 0x74, 0x6d, 0x30, 0x33, 0x36, 0x77, 0x57,
  0x4e, 0x62, 0x4c, 0x76, 0x00, 0x06, 0x00, 0x4a, 0x39, 0x35, 0x32, 0x37, 0x2f, 0x6f, 0x77, 0x68,
  0x6d, 0x6d, 0x6d, 0x64, 0x36, 0x69, 0x61, 0x7a, 0x78, 0x6d, 0x66, 0x66, 0x75, 0x31, 0x68, 0x30,
  0x6e, 0x6f, 0x30, 0x6e, 0x6b, 0x37, 0x39, 0x75, 0x71, 0x63, 0x73, 0x61, 0x69, 0x33, 0x73, 0x38,
  0x6a, 0x76, 0x69, 0x75, 0x78, 0x33, 0x6a, 0x39, 0x31, 0x62, 0x32, 0x73, 0x77, 0x33, 0x67, 0x64,
  0x78, 0x32, 0x7a, 0x6f, 0x62, 0x39, 0x62, 0x6e, 0x79, 0x61, 0x67, 0x32, 0x34, 0x3a, 0x66, 0x64,
  0x58, 0x6a, 0x00, 0x00, 0xc0, 0x57, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x80, 0x2a, 0x00, 0x08,
  0xa6, 0xe3, 0xdd, 0x8c, 0x23, 0x72, 0x2b, 0x5f, 0x00, 0x25, 0x00, 0x00, 0x00, 0x24, 0x00, 0x04,
  0x6e, 0x7f, 0x1e, 0xff, 0x00, 0x08, 0x00, 0x14, 0xe6, 0x53, 0x69, 0xb4, 0x62, 0x7d, 0x45, 0x12,
  0xf5, 0x40, 0xac, 0x07, 0x0f, 0x80, 0x23, 0xef, 0x1d, 0x65, 0xdd, 0xe9, 0x80, 0x28, 0x00, 0x04,
  0x41, 0x5d, 0xb2, 0xae
};

TEST(StunMessage, CommonTest) {
  StunMessage test("9527/owhmmmd6iazxmffu1h0no0nk79uqcsai3s8jviux3j91b2sw3gdx2zob9bnyag24", "ysdbmiuxsz20slatqep17fhk", "fdXj");
  EXPECT_TRUE(test.Parse(kStunMessage, sizeof(kStunMessage)/ sizeof(uint8_t)));
  EXPECT_TRUE(test.HasUseCandidate());
  boost::asio::ip::udp::endpoint ep(boost::asio::ip::make_address("127.0.0.1"), 5555);
  test.SetXorMappedAddress(&ep);
  EXPECT_TRUE(test.CreateResponse());
}